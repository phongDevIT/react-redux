{"ast":null,"code":"const INCREMENT = \"increment\";\nconst DECREMENT = \"decrement\";\nconst INCREMENTBYVALUE = \"incrementbyvalue\";\nconst initialState = {\n  count: 0\n};\nexport const increment = () => ({\n  type: INCREMENT\n});\nexport const decrement = () => ({\n  type: DECREMENT\n});\nexport const incrementByValue = value => ({\n  type: INCREMENTBYVALUE,\n  payload: value\n});\nfunction counterReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"increment\":\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case \"decrement\":\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case \"incrementbyvalue\":\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    default:\n      return state;\n  }\n}\nexport default counterReducer;","map":{"version":3,"names":["INCREMENT","DECREMENT","INCREMENTBYVALUE","initialState","count","increment","type","decrement","incrementByValue","value","payload","counterReducer","state","arguments","length","undefined","action"],"sources":["C:/my-app-redux/src/redux/Counter.js"],"sourcesContent":["const INCREMENT = \"increment\";\r\nconst DECREMENT = \"decrement\";\r\nconst INCREMENTBYVALUE = \"incrementbyvalue\";\r\n\r\nconst initialState = {\r\n    count: 0,\r\n};\r\nexport const increment = () => ({\r\n    type: INCREMENT,\r\n});\r\nexport const decrement = () => ({\r\n    type: DECREMENT,\r\n});\r\nexport const incrementByValue = (value) => ({\r\n    type: INCREMENTBYVALUE,\r\n    payload: value,\r\n});\r\n\r\nfunction counterReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"increment\":\r\n            return {\r\n                ...state,\r\n                count: state.count + 1,\r\n            };\r\n        case \"decrement\":\r\n            return {\r\n                ...state,\r\n                count: state.count - 1,\r\n            };\r\n        case \"incrementbyvalue\":\r\n            return {\r\n                ...state,\r\n                count: state.count + action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default counterReducer;\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,WAAW;AAC7B,MAAMC,SAAS,GAAG,WAAW;AAC7B,MAAMC,gBAAgB,GAAG,kBAAkB;AAE3C,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE;AACX,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGA,CAAA,MAAO;EAC5BC,IAAI,EAAEN;AACV,CAAC,CAAC;AACF,OAAO,MAAMO,SAAS,GAAGA,CAAA,MAAO;EAC5BD,IAAI,EAAEL;AACV,CAAC,CAAC;AACF,OAAO,MAAMO,gBAAgB,GAAIC,KAAK,KAAM;EACxCH,IAAI,EAAEJ,gBAAgB;EACtBQ,OAAO,EAAED;AACb,CAAC,CAAC;AAEF,SAASE,cAAcA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGV,YAAY;EAAA,IAAEa,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChD,QAAQC,MAAM,CAACV,IAAI;IACf,KAAK,WAAW;MACZ,OAAO;QACH,GAAGM,KAAK;QACRR,KAAK,EAAEQ,KAAK,CAACR,KAAK,GAAG;MACzB,CAAC;IACL,KAAK,WAAW;MACZ,OAAO;QACH,GAAGQ,KAAK;QACRR,KAAK,EAAEQ,KAAK,CAACR,KAAK,GAAG;MACzB,CAAC;IACL,KAAK,kBAAkB;MACnB,OAAO;QACH,GAAGQ,KAAK;QACRR,KAAK,EAAEQ,KAAK,CAACR,KAAK,GAAGY,MAAM,CAACN;MAChC,CAAC;IACL;MACI,OAAOE,KAAK;EACpB;AACJ;AACA,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}